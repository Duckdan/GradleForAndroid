apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: '../groovy/variable.gradle'
apply from: '../groovy/list.gradle'
apply from: '../groovy/array.gradle'
apply from: '../groovy/maps.gradle'
apply from: '../groovy/class.gradle'
apply from: '../groovy/function.gradle'
apply from: '../groovy/closure.gradle'
apply from: '../groovy/tasks.gradle'
apply from: '../groovy/taskDependenciesAndOrdering.gradle'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.lijiankun24.gradleforandroid"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "debuggable", "true"
        }
        staging {
            buildConfigField 'boolean', 'debuggable', 'false'
            versionNameSuffix '-staging'
            applicationIdSuffix '.staging'
        }
        release {
            buildConfigField "boolean", "debuggable", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    signingConfigs {
        release {
            storeFile file("release.keystore")
            storePassword "password"
            keyAlias "ReleaseKey"
            keyPassword "password"
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name == "packageRelease") {
        theTask.dependsOn(getReleasePassword)
    }
}
task getReleasePassword {
    def password = ''
    File file = getRootProject().file('private.properties')
    if (file.exists()) {
        Properties properties = new Properties()
        properties.load(file.newDataInputStream())
        password = properties.getProperty('release.password')
    }
    if (!password?.trim()) {
        password = new String(System.console().readPassword("\nWhat's the secret password?"))
    }
    android.signingConfigs.release.storePassword = password
    android.signingConfigs.release.keyPassword = password
}